LIBRARY ieee;							 --Provide compiler with access to Library
USE ieee.std_logic_1164.all;		 --Use all contents from package in ieee Library
USE ieee.std_logic_arith.all;		 --Use all contents from package in ieee Library
USE ieee.std_logic_unsigned.all;	 --Use all contents from package in ieee Library
--USE work.Reg32en_package.all;

ENTITY MEM_WB_REG IS
GENERIC(N : INTEGER := 32);
	PORT (Clock					 	: IN STD_LOGIC;
			MEM_read_data		 	: IN STD_LOGIC_VECTOR(N-1 DOWNTO 0);
			EX_MEM_ALU_result  	: IN STD_LOGIC_VECTOR(N-1 DOWNTO 0);
			EX_MEM_write_register: IN STD_LOGIC_VECTOR(4 DOWNTO 0);
			EX_MEM_MemtoReg		: IN STD_LOGIC;
			EX_MEM_RegWrite	 	: IN STD_LOGIC;
			MEM_WB_read_data	 	: OUT STD_LOGIC_VECTOR(N-1 DOWNTO 0);
			MEM_WB_ALU_result  	: OUT STD_LOGIC_VECTOR(N-1 DOWNTO 0);
			MEM_WB_write_register: OUT STD_LOGIC_VECTOR(4 DOWNTO 0);
			MEM_WB_MemtoReg		: OUT STD_LOGIC;
			MEM_WB_RegWrite	 	: OUT STD_LOGIC);
END MEM_WB_REG;

ARCHITECTURE Behavior OF MEM_WB_REG IS

BEGIN
	PROCESS(Clock)
	BEGIN
		IF Clock'EVENT AND Clock = '1' THEN		-- on the rising clock edge
			EX_MEM_Branch_Addr 	  <=	Branch_Addr;
			EX_MEM_ALU_result	 	  <=	ALU_result;
			EX_MEM_write_data  	  <=	FWD_data_2;
			EX_MEM_write_register  <=	write_register;
			EX_MEM_MemRead		 	  <=	ID_EX_MemRead;
			EX_MEM_MemWrite		  <=	ID_EX_MemWrite;
			EX_MEM_MemtoReg		  <=	ID_EX_MemtoReg;
			EX_MEM_RegWrite	 	  <=	ID_EX_RegWrite;
			EX_MEM_Branch_eq	 	  <=	ID_EX_Branch_eq;
			EX_MEM_Branch_ne	 	  <=	ID_EX_Branch_ne;
			EX_MEM_Jump			 	  <=	ID_EX_Jump
			EX_MEM_Zero				  <=	Zero;
		END IF;
	END PROCESS;
END Behavior;