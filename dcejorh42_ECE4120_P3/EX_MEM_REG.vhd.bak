LIBRARY ieee;							 --Provide compiler with access to Library
USE ieee.std_logic_1164.all;		 --Use all contents from package in ieee Library
USE ieee.std_logic_arith.all;		 --Use all contents from package in ieee Library
USE ieee.std_logic_unsigned.all;	 --Use all contents from package in ieee Library
--USE work.Reg32en_package.all;

ENTITY EX_MEM_REG IS
GENERIC(N : INTEGER := 32);
	PORT (Clock,Reset			 :  IN STD_LOGIC;
			Branch_Addr		 	 :  IN STD_LOGIC_VECTOR(N-1 DOWNTO 0);
			ALU_result			 : IN STD_LOGIC_VECTOR(N-1 DOWNTO 0);
			FWD_data_2			 : IN STD_LOGIC_VECTOR(N-1 DOWNTO 0);
			write_register		 : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
			ID_EX_MemRead		 : IN STD_LOGIC;
			ID_EX_MemWrite		 : IN STD_LOGIC;
			ID_EX_MemtoReg		 : IN STD_LOGIC;
			ID_EX_RegWrite		 : IN STD_LOGIC;
			ID_EX_Branch_eq	 : IN STD_LOGIC;
			ID_EX_Branch_ne	 : IN STD_LOGIC;
			ID_EX_Jump,Zero	 : IN STD_LOGIC;
			EX_MEM_Branch_Addr : OUT STD_LOGIC_VECTOR(N-1 DOWNTO 0);
			EX_MEM_ALU_result	 : OUT STD_LOGIC_VECTOR(N-1 DOWNTO 0);
			EX_MEM_write_data  : OUT STD_LOGIC_VECTOR(N-1 DOWNTO 0);
			ID_EX_extend_value : OUT STD_LOGIC_VECTOR(N-1 DOWNTO 0);
			EX_MEM_write_register: OUT STD_LOGIC_VECTOR(4 DOWNTO 0);
			ID_EX_Rd				 : OUT STD_LOGIC_VECTOR(4 DOWNTO 0));
END EX_MEM_REG;

ARCHITECTURE Behavior OF ID_EX_REG IS

BEGIN
	PROCESS(Reset,Clock)
	BEGIN
		IF Reset = '1' THEN				-- This is an asynchronous reset
			ID_EX_nextPC  <=  (OTHERS => '0');
			ID_EX_read_data_1	<=	(OTHERS => '0');
			ID_EX_read_data_2	<=	(OTHERS => '0');
			ID_EX_extend_value  <=	(OTHERS => '0');
			ID_EX_Rs	<= (OTHERS => '0');
			ID_EX_Rt	<= (OTHERS => '0');
			ID_EX_Rd	<= (OTHERS => '0');
		ELSIF Clock'EVENT AND Clock = '1' THEN		-- on the rising clock edge
			ID_EX_nextPC  <=  IF_ID_nextPC;
			ID_EX_read_data_1	<=	read_data_1;
			ID_EX_read_data_2	<=	read_data_2;
			ID_EX_extend_value  <=	extend_value;
			ID_EX_Rs	<= IF_ID_Rs;
			ID_EX_Rt	<= IF_ID_Rt;
			ID_EX_Rd	<= IF_ID_Rd;
		END IF;
	END PROCESS;
END Behavior;